from django.shortcuts import render, redirect
from django.http import HttpResponse, request
import csv
import matplotlib.pyplot as plt;
import numpy as np
import xlrd
import pandas as pd
from django.shortcuts import render,redirect
from sklearn.naive_bayes import BernoulliNB
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
import time
from sklearn.metrics import classification_report, f1_score, accuracy_score, confusion_matrix

from .urlaction import URLCheck
from .WebPrediction import predict_nn


from .AdaBoostAlgo import AdaBoostAlgo
from .NBAlgo import NBAlgo
from .KNNAlgo import KNNAlgo
from .DTAlgo import DTAlgo
from .RFAlgo import RFAlgo
from .Testing import Testing
from .Prediction import Prediction


from .models import dataset
from .models import accuracysc
from .models import *

# Create your views here.
def home(request):
    return render(request, 'index.html')


def alogin(request):
    return render(request, 'adminlogin.html')


def aloginaction(request):
    if request.method == 'POST':
        uid = request.POST['uid']
        pwd = request.POST['pwd']

        if uid == 'admin' and pwd == 'admin':
            request.session['adminid'] = 'admin'
            return render(request, 'admin_home.html')

        else:
            return render(request, 'adminlogin.html', {'msg': "Login Fail"})

    else:
        return render(request, 'adminlogin.html')


def adminhome(request):
    if "adminid" in request.session:

        return render(request, 'admin_home.html')

    else:
        return render(request, 'adminlogin.html')


def alogout(request):
    try:
        del request.session['adminid']
    except:
        pass
    return render(request, 'adminlogin.html')

def uploadpage(request):
    if "adminid" in request.session:

        return render(request, 'uploaddataset.html')

    else:
        return render(request, 'adminlogin.html')
def uploadaction(request):
    if "adminid" in request.session:
        file = request.POST['file']
        file = file
        d = dataset.objects.all().delete()
        with open(file, 'r') as fin:
            # csv.DictReader uses first line in file for column headings by default
            dr = csv.DictReader(fin)  # comma is default delimiter
            to_db = [(i['API_KEY'], i['API_Calls'],i['Malware']) for i in dr]
            for l in to_db:
                d = dataset(API_KEY=l[0], API_Calls=l[1], Malware=l[2])
                d.save()

        return render(request, 'uploaddataset.html', {'msg': "Dataset Uploaded Successfully"})

    else:
        return render(request, 'adminlogin.html')


def trainingpage(request):
    if "adminid" in request.session:

        return render(request, 'trainingpage.html')

    else:
        return render(request, 'adminlogin.html')

def adaboost(request):
    
    AdaBoostAlgo.classification()

    return render(request, 'trainingpage.html', {'msg': "AdaBoost Classifier Training Completed Successfully"})
    
def nbdef(request):
    
    NBAlgo.classification()

    return render(request, 'trainingpage.html', {'msg': "Naive Bayes Classifier Training Completed Successfully"})
def knndef(request):
    
    KNNAlgo.classification()

    return render(request, 'trainingpage.html', {'msg': "KNN Classifier Training Completed Successfully"})
def dtdef(request):
    
    DTAlgo.classification()

    return render(request, 'trainingpage.html', {'msg': "Decision Tree Classifier Training Completed Successfully"})
def rfdef(request):
    
    RFAlgo.classification()

    return render(request, 'trainingpage.html', {'msg': "Random Forest Classifier Training Completed Successfully"})
    
def testingpage(request):
    if "adminid" in request.session:

        return render(request, 'testingpage.html')

    else:
        return render(request, 'adminlogin.html')

def adaboosttesting(request):
    res=Testing.predict('adaboost_model.sav')
    #d = accuracysc.objects.filter(algo='AdaBoost').delete()
    #d = accuracysc(algo='AdaBoost', accuracyv=float(res))
    #d.save()
    return render(request, 'testingpage.html', {'msg': "Testing Completed with AdaBoost, Accuracy : "+str(res)+"%"})
def nbtesting(request):
    
    res=Testing.predict('nb_model.sav')
    d = accuracysc.objects.filter(algo='NB').delete()
    d = accuracysc(algo='NB', accuracyv=float(res))
    d.save()
    return render(request, 'testingpage.html', {'msg': "Testing Completed with Naive Bayes, Accuracy : "+str(res)+"%"})


def knntesting(request):
    
    res=Testing.predict('knn_model.sav')
    #d = accuracysc.objects.filter(algo='KNN').delete()
    #d = accuracysc(algo='KNN', accuracyv=float(res))
    #d.save()
    return render(request, 'testingpage.html', {'msg': "Testing Completed with KNN, Accuracy : "+str(res)+"%"})


def dttesting(request):
    
    res=Testing.predict('dt_model.sav')
    d = accuracysc.objects.filter(algo='DT').delete()
    d = accuracysc(algo='DT', accuracyv=float(res))
    d.save()
    return render(request, 'testingpage.html', {'msg': "Testing Completed with Decision Tree, Accuracy : "+str(res)+"%"})


def rftesting(request):
    
    res=Testing.predict('rf_model.sav')
    #d = accuracysc.objects.filter(algo='RF').delete()
    #d = accuracysc(algo='RF', accuracyv=float(res))
    #d.save()
    return render(request, 'testingpage.html', {'msg': "Testing Completed with Random Forest, Accuracy : "+str(res)+"%"})

def viewaccuracy(request):
    if "adminid" in request.session:
        algorithms = ['DT', 'NB']  # List of algorithms to display
        d = accuracysc.objects.filter(algo__in=algorithms)  # Filter records for the specified algorithms
        
        #d = accuracysc.objects.all()
        
        return render(request, 'viewaccuracy.html', {'data': d})

    else:
        return render(request, 'adminlogin.html')

def viewgraph(request):
    if "adminid" in request.session:
        algos = []
        row = accuracysc.objects.all()
        rlist = []
        for r in row:
            algos.append(r.algo)
            rlist.append(r.accuracyv)


        height = rlist
        # print(height)
        bars = algos
        y_pos = np.arange(len(bars))
        plt.bar(bars, height, color=['purple','blue','green','yellow', 'cyan'])
        # plt.plot( bars, height )
        plt.xlabel('Algorithms')
        plt.ylabel('Accuracy ')
        plt.title('Accuracy Measure')
        plt.show()

        return redirect('viewaccuracy')

def userlogin(request):
    if request.method == 'POST':
        uid = request.POST['uid']
        pwd = request.POST['pwd']

        d = user.objects.filter(email__exact=uid).filter(pwd__exact=pwd).count()

        if d > 0:
            d = user.objects.filter(email__exact=uid)
            request.session['sid'] = uid
            
            return render(request, 'userhome.html', {'data': d[0]})
        else:
            return render(request, 'users.html', {'msg': "Login Fail"})

    else:
        return render(request, 'users.html')
def userreg(request):
    if request.method == 'POST':
        name = request.POST['name']
        email = request.POST['email']
        pwd = request.POST['pwd']
        phone = request.POST['phone']
        addr = request.POST['addr']
        

        d = user.objects.filter(email__exact=email).count()
        if d > 0:
            return render(request, 'userreg.html', {'msg': "Email Already Registered"})
        else:
            d = user(email=email, pwd=pwd, name=name, phone=phone, addr=addr)
            d.save()
            return render(request, 'userreg.html', {'msg': "Register Success."})

    else:
        return render(request, 'userreg.html')

def userhome(request):
    if "sid" in request.session:
        uid = request.session["sid"]
        d = user.objects.filter(email__exact=uid)

        return render(request, 'userhome.html', {'data': d[0]})

    else:
        return render(request, 'users.html')

def ulogout(request):
    try:
        del request.session['sid']
    except:
        pass
    return render(request, 'users.html')

def detection(request):
    if request.method == 'POST':
        dataset = [row.split()[1] for row in open('malware_API_dataset.csv').readlines()[1:]]
        file = request.POST['file']
        
        filename="Data\\"+file
        #file=[row.split() for row in open(file).readlines()]
        file = open(filename, 'rt')
        text = file.read()
        file.close()
        # split into words
        from nltk.tokenize import word_tokenize
        tokens = word_tokenize(text)
        # remove all tokens that are not alphabetic
        words = [word for word in tokens if word.isalpha()]
        calls=""
        set3 = set(dataset)&set(words) 
        print(set3)

        if len(set3)>0:
            for s in set3:
                calls=calls+s+" "
            calls=calls.strip()
            print(calls)
            r=Prediction.predict(calls)
            print(r)
            return render(request, 'result.html',{'data': r})
        else:
            return render(request, 'detection.html',{'data': 'Not a Malware file'})
               
      
    else:
        return render(request, 'detection.html')


def xlupload(request):
    if "adminid" in request.session:
        file=request.POST['file']
        file=file
        book = xlrd.open_workbook(file)
        sheet = book.sheet_by_index(0)
        pdataset.objects.all().delete()
        for r in range(1, sheet.nrows):
            f0 = sheet.cell(r, 0).value
            f1 = sheet.cell(r, 1).value
            f2 = sheet.cell(r, 2).value
            f3 = sheet.cell(r, 3).value
            f4 = sheet.cell(r, 4).value
            f5 = sheet.cell(r, 5).value
            f6 = sheet.cell(r, 6).value
            f7 = sheet.cell(r, 7).value
            f8 = sheet.cell(r, 8).value
            f9 = sheet.cell(r, 9).value
            f10 = sheet.cell(r, 10).value
            f11 = sheet.cell(r, 11).value
            f12 = sheet.cell(r, 12).value
            f13 = sheet.cell(r, 13).value
            f14 = sheet.cell(r, 14).value
            f15 = sheet.cell(r, 15).value
            f16 = sheet.cell(r, 16).value
            res = sheet.cell(r, 17).value
            d=pdataset(v1=f0,v2=f1,v3=f2,v4=f3,v5=f4,v6=f5,v7=f6,v8=f7,v9=f8,v10=f9,v11=f10,v12=f11,v13=f12,v14=f13,v15=f14,v16=f15,v17=f16,res=res)
            d.save()
        return render(request, 'uploaddataset.html',{'msg':"Dataset Uploaded Successfully"})
    else:
        return render(request, 'adminlogin.html')


def predictions(request):
    if "adminid" in request.session:
        
        return render(request, 'predictions.html')

    else:
        return render(request, 'admin.html')

def nntest(request):
    if "adminid" in request.session:
        return render(request, 'nntest.html')

    else:
        return render(request, 'admin.html')
def naivetest(request):
    if "adminid" in request.session:
        return render(request, 'naivetest.html')
    else:
        return render(request, 'admin.html')

def svmtest(request):
    if "adminid" in request.session:
        return render(request, 'svmtest.html')
    else:
        return render(request, 'admin.html')

def cnntest(request):
    if "adminid" in request.session:
        return render(request, 'cnntest.html')

    else:
        return render(request, 'admin.html')


def naiveprediction(request):
    if "adminid" in request.session:
        
        
        file=request.POST['tfile']
        file=""+file
        trainset = []
        y_train = []
        trainset.clear()
        y_train.clear()
            
        data=pdataset.objects.all()
        for d in data:
            x_train = []
            x_train.clear()
            x_train.append(float(d.v1))
            x_train.append(float(d.v2))
            x_train.append(float(d.v3))
            x_train.append(float(d.v4))
            x_train.append(float(d.v5))
            x_train.append(float(d.v6))
            x_train.append(float(d.v7))
            x_train.append(float(d.v8))
            x_train.append(float(d.v9))
            x_train.append(float(d.v10))
            x_train.append(float(d.v11))
            x_train.append(float(d.v12))
            x_train.append(float(d.v13))
            x_train.append(float(d.v14))
            x_train.append(float(d.v15))
            x_train.append(float(d.v16))
            x_train.append(float(d.v17))
            
            y_train.append([d.res])
            trainset.append(x_train)

                
            #print(d.v1,d.v2)
        trainset = np.array(trainset)
        y_train = np.array(y_train)
        tf = pd.read_csv(file)
        print(tf)
        url = tf['URL']
        U1 = np.array(url)
        res = tf['Result']
        R1 = np.array(res)
        tf = tf.drop(['URL'], 1)
        tf = tf.drop(['Result'], 1)
        testdata = np.array(tf)
        print(testdata)
        testdata = testdata.reshape(len(testdata), -1)
        nv = BernoulliNB()
        nv.fit(trainset, y_train)
        s = time.clock()
        result = nv.predict(testdata)  # Predicting 
        print(result)
        
        act=[]
        for r in R1:
            r=float(r)
            act.append(str(r))

        print(act,'<<<<<<<<<<<<<<<<<<<<<<<<<<')
        accuracy = accuracy_score(act, result)
        f1=f1_score(act, result, pos_label='0.0')
        print(f1,'F1111111111111111111111111111111111111111111111111111111111111')
        accuracy=int(accuracy*100)
        print(accuracy,'Acuracy')

        #s=graph.objects.update(naive=accuracy)
        s=graph2.objects.all().delete()
        d=graph2(naive=accuracy,nn=0,svm=0, cnn=0)
        d.save()
        
                
        return render(request, 'nbresults.html',{'msg':accuracy})

    else:
        return render(request, 'admin.html')


def svmprediction(request):
    if "adminid" in request.session:
        
        
        file=request.POST['tfile']
        file=""+file
        trainset = []
        y_train = []
        trainset.clear()
        y_train.clear()
            
        data=pdataset.objects.all()
        for d in data:
            x_train = []
            x_train.clear()
            x_train.append(float(d.v1))
            x_train.append(float(d.v2))
            x_train.append(float(d.v3))
            x_train.append(float(d.v4))
            x_train.append(float(d.v5))
            x_train.append(float(d.v6))
            x_train.append(float(d.v7))
            x_train.append(float(d.v8))
            x_train.append(float(d.v9))
            x_train.append(float(d.v10))
            x_train.append(float(d.v11))
            x_train.append(float(d.v12))
            x_train.append(float(d.v13))
            x_train.append(float(d.v14))
            x_train.append(float(d.v15))
            x_train.append(float(d.v16))
            x_train.append(float(d.v17))
            
            y_train.append([d.res])
            trainset.append(x_train)

                
            #print(d.v1,d.v2)
        trainset = np.array(trainset)
        y_train = np.array(y_train)
        tf = pd.read_csv(file)
        print(tf)
        url = tf['URL']
        U1 = np.array(url)
        res = tf['Result']
        R1 = np.array(res)
        tf = tf.drop(['URL'], 1)
        tf = tf.drop(['Result'], 1)
        testdata = np.array(tf)
        print(testdata)
        testdata = testdata.reshape(len(testdata), -1)
        from sklearn import svm


        nv = svm.SVC()
        nv.fit(trainset, y_train)
        s = time.clock()
        result = nv.predict(testdata)  # Predicting 
        print(result)
        
        act=[]
        for r in R1:
            r=float(r)
            act.append(str(r))

        print('<<<<<<<<<<<<<<<<<<<<<<<<<<')
        accuracy = accuracy_score(act, result)
        f1=f1_score(act, result, pos_label='0.0')
        print(accuracy,'Acuracy')
        print(f1,'F1111111111111111111111111111111111111111111111111111111111111')
        accuracy=accuracy*100
        s=graph2.objects.update(svm=accuracy)
        #d=graph2(naive=accuracy,nn=0)
        d.save()
        
        
                
        return render(request, 'svmresults.html',{'msg':accuracy})

    else:
        return render(request, 'admin.html')


def nnprediction(request):
    if "adminid" in request.session:
        
        
        file=request.POST['tfile']
        file=""+file
        trainset = []
        y_train = []
        trainset.clear()
        y_train.clear()
            
        data=pdataset.objects.all()
        for d in data:
            x_train = []
            x_train.clear()
            x_train.append(float(d.v1))
            x_train.append(float(d.v2))
            x_train.append(float(d.v3))
            x_train.append(float(d.v4))
            x_train.append(float(d.v5))
            x_train.append(float(d.v6))
            x_train.append(float(d.v7))
            x_train.append(float(d.v8))
            x_train.append(float(d.v9))
            x_train.append(float(d.v10))
            x_train.append(float(d.v11))
            x_train.append(float(d.v12))
            x_train.append(float(d.v13))
            x_train.append(float(d.v14))
            x_train.append(float(d.v15))
            x_train.append(float(d.v16))
            x_train.append(float(d.v17))
            
            y_train.append([d.res])
            trainset.append(x_train)

                
            #print(d.v1,d.v2)
        trainset = np.array(trainset)
        y_train = np.array(y_train)
        tf = pd.read_csv(file)
        url = tf['URL']
        U1 = np.array(url)
        res = tf['Result']
        R1 = np.array(res)
        tf = tf.drop(['URL'], 1)
        tf = tf.drop(['Result'], 1)
        testdata = np.array(tf)
        testdata = testdata.reshape(len(testdata), -1)
        nv = MLPClassifier()
        nv.fit(trainset, y_train)
        s = time.clock()
        result = nv.predict(testdata)  # Predicting 
        print(result)
        
        act=[]
        for r in R1:
            r=float(r)
            act.append(str(r))

        print(act,'<<<<<<<<<<<<<<<<<<<<<<<<<<')
        accuracy = accuracy_score(act, result)*100
        f1=f1_score(act, result, pos_label='0.0')
        print(accuracy,'Acuracy')
        print(f1,'F1111111111111111111111111111111111111111111111111111111111111')
        accuracy=accuracy
        s=graph2.objects.update(nn=accuracy)
        
               
        return render(request, 'nnresults.html',{'msg':accuracy})
    else:
        return render(request, 'admin.html')



def cnnprediction(request):
    if "adminid" in request.session:

        from .CNN_D import CnnModel
        CnnModel()
        from .CNN_Testing import CnnModel
        acc = CnnModel()

        s=graph2.objects.update(cnn=acc*100)
        

        return render(request, 'cnnresults.html', {'msg': acc})

    else:
        return render(request, 'admin.html')


def graphview(request):
    if "adminid" in request.session:
        performance=[]
        row=graph2.objects.all()
        for r in row:
            performance.append(r.naive)
            performance.append(r.nn)
            #performance.append(r.svm)
            #performance.append(r.cnn)
        objects = ('Naive Bayes','Neural Network') #,'SVM','CNN')
        y_pos = np.arange(len(objects))
        print(performance)
        plt.bar(y_pos, performance, align='center', alpha=0.5)
        plt.xticks(y_pos, objects)
        plt.ylabel('Accuracy %')
        plt.title('Performance Algorithms')
        
        from PIL import Image 
        plt.savefig('C:\\Users\\arhsu\\Music\\Django\\g1.jpg')
        im = Image.open(r"C:\\Users\\arhsu\\Music\\Django\\g1.jpg") 
          
        im.show()
        
    return redirect('predictions')
def prediction(request):
    if "sid" in request.session:
        return render(request, 'usearch.html')
    else:
        return redirect('ulogout')

        
def getprediction(request):
    url=request.POST['url']
    u=URLCheck()
    res= u.validation(url)
    if res==True:
        pass
    else:
        return render(request, 'usearch.html',{'msg':"Enter Valid URL"})
    #---------------------
    if URLCheck.ipaddress(url):
        f1 = 1
    else:
        f1 = 0
    #---------------------
    if URLCheck.favicon(url):
        f8 = 1
    else:
        f8 = 0
    #---------------------
    if URLCheck.extractPort(url):
        f9 = 0
    else:
        f9 = 1
    #---------------------
    print("length of url==" , len(url))
    if len(url)>24:f2=0
    else:f2=1
    #---------------------
    if url.find('@') == -1:f4 = 0
    else:f4 = 1
    #-----------------------
    if url.count('//') > 7:f5 = 0
    else:f5 = 1
    #------------------
    # --------------------
    if url.find('-') == -1:f6 = 1
    else:f6 = 0
        # --------------------
    if url.count('.') > 2:f7 = 0
    else:f7 = 1
        # --------------------
    if url.find('https') ==-1:f10 = 0
    else:f10 = 1
        # --------------------
    if url.find('mailto') == -1:f15 = 0
    else:f15 = 1
    ####################################
    row1 = ["f1", "f2", "f4", "f5", "f6", "f7","f8", "f9", "f10", "f15"]
    row=[f1,f2,f4,f5,f6,f7,f8,f9,f10,f15]
    print(row,"<<<<<<<<Row")
    import csv
    with open('test.csv', 'w') as csvFile:
        writer = csv.writer(csvFile)
        writer.writerow(row1)
        writer.writerow(row)
        csvFile.close()
    res=predict_nn()
    print(res)
    
    if float(res)>0:
        m='Legitimate Website'
    else:
        m='Phishing Website'

    return render(request, 'usearch2.html',{'msg':m,'url':url}) 
    #return render(request, 'usearch2.html')    

